// Nitish Malluru 932007196
// done

/**
 * Adds or Subtracts two 10-bit values.
 * Both inputs a and b are in SIGNED 2s complement format
 * when sub == 0, the chip performs add i.e. out=a+b
 * when sub == 1, the chip performs subtract i.e. out=a-b
 * carry reflects the overflow calculated for 10-bit add/subtract in 2s complement
 */

CHIP AddSub10 {
    IN a[10], b[10], sub;
    OUT out[10],carry;

    PARTS:
    // Put you code here:
    Negation16(in[0..9]=b, out=notb);
    Mux16(a[0..9]=b, b=notb, sel=sub, out=finalb);
    Add16(a[0..9]=a, b=finalb, out[0..9]= out, out[9] = final);

    //overflow (bsign: 0 = +, bsign: 1 = -)
    Xor(a=b[9], b=sub, out=bsign);

    //asign
    And(a=a[9], b=true, out=asign);



    Or(a=asign, b=bsign, out=aandbpositive);
    Not(in=final, out=finalsign);
    Or(a=aandbpositive, b=finalsign, out=of0);
    //of0 == 0 means overflow

    And(a=asign, b=bsign, out=aandbnegative);
    And(a=aandbnegative, b=finalsign, out=of1);
    Not(in=of0, out=c0);
    Or(a=c0, b=of1, out=carry);

}